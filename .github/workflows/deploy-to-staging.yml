name: Update staging environment
on:
  release:
    # Only use the types keyword to narrow down the activity types that will trigger your workflow.
    types: [published]

jobs:
  DockerMakeAndPushRelease:
    name: Build docker image and push to ECR
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.event.repository.name }}:${{ github.event.release.tag_name }}
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
      ecr-image-path: ${{ steps.update-ecr.outputs.EcrImagePath }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Build Docker image
        run: |
          cp ./requirements.txt ./admin_webapp/requirements.txt
          docker build --rm \
            --build-arg NAME=${{ github.event.repository.name }} \
            --build-arg PORT=9903 \
            -t $IMAGE_NAME \
            ./admin_webapp
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker tag and push image to ECR
        id: update-ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag ${IMAGE_NAME} $ECR_REGISTRY/aaq_solution/${IMAGE_NAME}
          docker push $ECR_REGISTRY/aaq_solution/$IMAGE_NAME
          echo "::set-output name=EcrImagePath::${{$ECR_REGISTRY/aaq_solution/$IMAGE_NAME}}"

  DeployStagingECSCluster:
    name: Deploy ECS cluster
    needs: [DockerMakeAndPushRelease]
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install the ECS CLI
        run: |
          sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
          sudo chmod +x /usr/local/bin/ecs-cli

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull down ECS service
        env:
          IMAGE_NAME: ${{ needs.DockerMakeAndPushRelease.outputs.ecr-image-path }}
        run: |
          ecs-cli compose \
          -f docker-compose/docker-compose-stg.yml \
          --project-name ${PROJECT_NAME} \
          --cluster-config ${PROJECT_NAME}-config \
          --cluster ${{ secrets.SOLUTION_NAME }}-cluster \
          service down --timeout 10

      - name: Deploy using ECS CLI
        env:
          PROJECT_NAME: ${{ github.event.repository.name }}
          IMAGE_NAME: ${{ needs.DockerMakeAndPushRelease.outputs.ecr-image-path }}
          PORT: 9902
          AWS_REGION: ${{ secrets.AWS_REGION }}

          # app secrets
          INBOUND_CHECK_TOKEN: ${{ secrets.INBOUND_CHECK_TOKEN }}
          ENABLE_FAQ_REFRESH_CRON: ${{ secrets.ENABLE_FAQ_REFRESH_CRON}}
          PROMETHEUS_MULTIPROC_DIR: ${{ secrets.PROMETHEUS_MULTIPROC_DIR }}
          # database secrets
          PG_ENDPOINT: ${{ secrets.PG_ENDPOINT }}
          PG_PORT: 5432
          PG_USERNAME: "flask"
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          # sentry config
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ secrets.SENTRY_ENVIRONMENT }}
          SENTRY_TRACES_SAMPLE_RATE: ${{ secrets.SENTRY_TRACES_SAMPLE_RATE }}

        run: |
          ecs-cli configure \
          --cluster ${{ secrets.SOLUTION_NAME }}-cluster \
          --default-launch-type EC2 \
          --region ${AWS_REGION} \
          --config-name ${PROJECT_NAME}-config

          ecs-cli compose \
          -f docker-compose/docker-compose-stg.yml \
          --project-name ${PROJECT_NAME} \
          --cluster-config ${PROJECT_NAME}-config \
          --task-role-arn arn:aws:iam::678681925278:role/${SOLUTION_NAME}-task-role \
          service up \
          --create-log-groups \
          --deployment-min-healthy-percent 0 

